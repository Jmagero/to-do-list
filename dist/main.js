/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const projectsContainer = document.querySelector('.projects__list');\nconst projectForm = document.querySelector('.projects__form');\nconst projectInput = document.querySelector('.projects__form__input');\nconst tasksContainer = document.querySelector('.todos');\nconst projectTitle = document.querySelector('.todos__title');\nconst pendingTasksCounter = document.querySelector('.todos__count');\nconst projectDeleteButton = document.querySelector('.projects__delete_button');\nconst taskTemplate = document.getElementById('task-template');\nconst projectTasks = document.querySelector('.all_tasks');\nconst taskForm = document.querySelector('.todos__form');\nconst taskFormInput = document.querySelector('.todos__input');\n\nconst projectsKey = 'myProjects';\nconst selectedProjectIdKey = 'mySelectedProjectId';\nlet projects = JSON.parse(localStorage.getItem(projectsKey)) || [{ id: Date.now().toString(), name: 'General', tasks: [] }];\nlet selectedProjectId = JSON.parse(localStorage.getItem(selectedProjectIdKey));\n\n// Utility Functions\nfunction Project(name) {\n  return { id: Date.now().toString(), name, tasks: [] };\n}\n\nfunction Task(name) {\n  return { id: `task-${Date.now().toString()}`, name, completed: false };\n}\n\nfunction removeElements(parentElement) {\n  while (parentElement.lastChild) {\n    parentElement.removeChild(parentElement.lastChild);\n  }\n}\n\nfunction renderProjects() {\n  projects.forEach((project) => {\n    const projectItem = document.createElement('li');\n    projectItem.classList.add('projects__item');\n    projectItem.setAttribute('id', `${project.id}`);\n    if (project.id === selectedProjectId) {\n      projectItem.classList.add('projects__item--active');\n    }\n    projectItem.innerText = project.name;\n    projectsContainer.appendChild(projectItem);\n  });\n}\n\nfunction renderTasks(selectedProject) {\n  selectedProject.tasks.forEach((task) => {\n    const taskElement = document.importNode(taskTemplate.content, true);\n    const checkBox = taskElement.querySelector('.todos__item');\n    checkBox.id = task.id;\n    checkBox.checked = task.completed;\n    const taskLabel = taskElement.querySelector('.todos__label');\n    taskLabel.htmlFor = task.id;\n    taskLabel.innerText = task.name;\n    projectTasks.appendChild(taskElement);\n  });\n}\n\nfunction renderPendingTasksCount(selectedProject) {\n  const pendingTasksCount = selectedProject.tasks.filter((task) => !task.completed).length;\n  const pendingTasksDescription = pendingTasksCount === 1 ? 'task' : 'tasks';\n  pendingTasksCounter.innerText = `${pendingTasksCount} ${pendingTasksDescription} pending.`;\n}\n\nfunction renderProjectsAndTasks() {\n  removeElements(projectsContainer);\n  renderProjects();\n  if (selectedProjectId === null) {\n    tasksContainer.style.display = 'none';\n  } else {\n    tasksContainer.style.display = '';\n    const selectedProject = projects.find((project) => project.id === selectedProjectId);\n    projectTitle.innerText = selectedProject.name;\n    renderPendingTasksCount(selectedProject);\n    removeElements(projectTasks);\n    renderTasks(selectedProject);\n  }\n}\n\nfunction save() {\n  localStorage.setItem(projectsKey, JSON.stringify(projects));\n  localStorage.setItem(selectedProjectIdKey, JSON.stringify(selectedProjectId));\n}\n\nfunction saveRender() {\n  save();\n  renderProjectsAndTasks();\n}\n// Event Listeners\nprojectForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n  const newProjectValue = projectInput.value;\n  if (newProjectValue === null || newProjectValue === '') return;\n  const newProject = Project(newProjectValue);\n  projects.push(newProject);\n  projectInput.value = null;\n  saveRender();\n});\n\nprojectsContainer.addEventListener('click', (e) => {\n  if (e.target.tagName === 'LI') {\n    selectedProjectId = e.target.id;\n    saveRender();\n  }\n});\n\nprojectDeleteButton.addEventListener('click', () => {\n  projects = projects.filter((project) => project.id !== selectedProjectId);\n  selectedProjectId = null;\n  saveRender();\n});\n\ntaskForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n  const taskName = taskFormInput.value;\n  if (taskName === null || taskName === '') return;\n  const newTask = Task(taskName);\n  taskFormInput.value = null;\n  const selectedProject = projects.find((project) => project.id === selectedProjectId);\n  selectedProject.tasks.push(newTask);\n  saveRender();\n});\n\nprojectTasks.addEventListener('click', (e) => {\n  const activeProject = projects.find((project) => project.id === selectedProjectId);\n\n  if (e.target.tagName === 'INPUT') {\n    const selectedTask = activeProject.tasks.find((task) => task.id === e.target.id);\n    selectedTask.completed = e.target.checked;\n    save();\n    renderPendingTasksCount(activeProject);\n  } else if (e.target.dataset.id === 'deleteSelectedTask') {\n    const activeCheckBox = e.target.parentNode.firstChild.firstChild;\n    if (activeCheckBox.checked) {\n      activeProject.tasks = activeProject.tasks.filter((task) => !(task.id === activeCheckBox.id));\n      saveRender();\n    }\n  }\n});\n\nrenderProjectsAndTasks();\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;